version: "3.9"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.4.arm64
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.9.4.arm64
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"     
      - "29092:29092"   
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  spark:
    image: apache/spark:3.5.2
    container_name: docker-spark-master
    command: ["/bin/bash","-lc","/opt/spark/sbin/start-master.sh -h spark && tail -f /dev/null"]
    environment:
    - IVY_HOME=/tmp/.ivy2
    - SPARK_SUBMIT_OPTS=-Dspark.jars.ivy=/tmp/.ivy2
    ports:
      - "18080:8080"
      - "7077:7077"
    depends_on:
      - kafka
    volumes:
      - ../spark:/app
      - ../data:/data:rw
      

  spark-worker:
    image: apache/spark:3.5.2
    container_name: docker-spark-worker-1
    command: ["/bin/bash","-lc","/opt/spark/sbin/start-worker.sh spark://spark:7077 && tail -f /dev/null"]
    environment:
      - SPARK_HOME=/opt/spark
    depends_on:
      - spark
    volumes:
      - ../data:/data:rw  

  producer:
    image: python:3.11-slim
    working_dir: /app
    volumes:
      - ../producer:/app:ro
    env_file:
      - ../.env
    environment:
      KAFKA_BROKER: kafka:9092
      KAFKA_TOPIC: mastodon_stream
    depends_on:
      - kafka
    command: >
      bash -lc "pip install --no-cache-dir -r requirements.txt &&
                python -u /app/mastodon_producer.py"

  postgres:
    image: postgres:15
    container_name: docker-postgres-1
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../data:/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 5s
      retries: 5

volumes:
  postgres_data:
